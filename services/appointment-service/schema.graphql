type Client {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  phone: String
}

type Stylist {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  specialties: [String]
  availability: [AvailabilitySlot]
}

type Service {
  id: ID!
  name: String!
  description: String
  duration: Int!
  price: Float!
  tenantId: ID!
}

type AvailabilitySlot {
  dayOfWeek: Int!
  startTime: String!
  endTime: String!
}

type Appointment {
  id: ID!
  tenantId: ID!
  client: Client!
  stylist: Stylist!
  services: [Service!]!
  date: String!
  startTime: String!
  duration: Int!
  totalPrice: Float!
  status: AppointmentStatus!
  notes: String
  cancellationReason: String
  cancellationDate: String
  createdAt: String!
  updatedAt: String!
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

type AppointmentConnection {
  edges: [AppointmentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AppointmentEdge {
  node: Appointment!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input AppointmentFilter {
  status: [AppointmentStatus]
  startDate: String
  endDate: String
  stylistId: ID
  clientId: ID
}

input AppointmentInput {
  clientId: ID!
  stylistId: ID!
  serviceIds: [ID!]!
  date: String!
  startTime: String!
  notes: String
}

input AppointmentUpdateInput {
  stylistId: ID
  serviceIds: [ID!]
  date: String
  startTime: String
  notes: String
  status: AppointmentStatus
}

type Query {
  # Fetch appointments with pagination and filtering
  appointments(
    tenantId: ID!
    first: Int
    after: String
    filter: AppointmentFilter
  ): AppointmentConnection!

  # Get a specific appointment
  appointment(id: ID!): Appointment

  # Get available time slots for a specific date
  availableTimeSlots(
    tenantId: ID!
    date: String!
    serviceIds: [ID!]!
    stylistId: ID
  ): [String!]!

  # Get services for a tenant
  services(tenantId: ID!): [Service!]!

  # Get stylists for a tenant
  stylists(tenantId: ID!): [Stylist!]!
}

type Mutation {
  # Create a new appointment
  createAppointment(
    tenantId: ID!
    input: AppointmentInput!
  ): Appointment!

  # Update an existing appointment
  updateAppointment(
    id: ID!
    input: AppointmentUpdateInput!
  ): Appointment!

  # Cancel an appointment
  cancelAppointment(
    id: ID!
    reason: String
  ): Appointment!

  # Mark appointment as completed
  completeAppointment(id: ID!): Appointment!

  # Mark appointment as no-show
  markNoShow(id: ID!): Appointment!
}

type Subscription {
  # Subscribe to appointment updates for a tenant
  appointmentUpdated(tenantId: ID!): Appointment!
  
  # Subscribe to new appointments for a tenant
  appointmentCreated(tenantId: ID!): Appointment!
  
  # Subscribe to cancelled appointments for a tenant
  appointmentCancelled(tenantId: ID!): Appointment!
} 